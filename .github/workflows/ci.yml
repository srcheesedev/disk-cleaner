name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # ================================================================
  # STAGE 1: ENVIRONMENT SETUP
  # ================================================================
  setup:
    name: 'Setup Environment'
    runs-on: ubuntu-latest
    outputs:
      rust-cache-key: ${{ steps.cache-key.outputs.key }}
      should-release: ${{ steps.check-release.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          HASH=$(sha256sum Cargo.lock | cut -d' ' -f1)
          echo "key=rust-${{ runner.os }}-$HASH" >> $GITHUB_OUTPUT

      - name: Check if should release
        id: check-release
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == "develop" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.cache-key.outputs.key }}

      - name: Pre-fetch dependencies
        run: cargo fetch

  # ================================================================
  # STAGE 2: PARALLEL TESTING
  # ================================================================
  test-unit:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.setup.outputs.rust-cache-key }}

      - name: Run unit tests
        run: cargo test --lib --verbose

  test-integration:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.setup.outputs.rust-cache-key }}

      - name: Run integration tests
        run: cargo test --test integration_tests --verbose

  test-lint:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.setup.outputs.rust-cache-key }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Generate documentation
        run: cargo doc --no-deps --document-private-items

  test-security:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # ================================================================
  # STAGE 3: BUILD VERIFICATION
  # ================================================================
  build:
    name: 'Build Verification'
    runs-on: ubuntu-latest
    needs: [setup, test-unit, test-integration, test-lint, test-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.setup.outputs.rust-cache-key }}

      - name: Build release
        run: cargo build --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-verification
          path: target/release/disk-cleaner-rs

  # ================================================================
  # STAGE 4: VERSIONING (PR develop -> main only)
  # ================================================================
  auto-version:
    name: 'Auto Version & Tag'
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-release == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      version-created: ${{ steps.version.outputs.version-created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto version and tag
        id: version
        uses: ./.github/actions/auto-version
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # ================================================================
  # STAGE 5: PARALLEL PACKAGE CREATION + CHANGELOG
  # ================================================================
  build-linux:
    name: 'Build Linux Packages'
    runs-on: ubuntu-latest
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
        package: [deb, rpm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Build Linux package
        uses: ./.github/actions/build-artifacts
        with:
          version: ${{ needs.auto-version.outputs.new-version }}
          target: ${{ matrix.target }}
          platform: "linux"
          package-type: ${{ matrix.package }}

  build-macos:
    name: 'Build macOS Packages'
    runs-on: macos-latest
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Build macOS universal package
        uses: ./.github/actions/build-artifacts
        with:
          version: ${{ needs.auto-version.outputs.new-version }}
          target: ${{ matrix.target }}
          platform: "macos"
          package-type: "pkg"

  build-windows:
    name: 'Build Windows Packages'
    runs-on: windows-latest
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Build Windows package
        uses: ./.github/actions/build-artifacts
        with:
          version: ${{ needs.auto-version.outputs.new-version }}
          target: ${{ matrix.target }}
          platform: "windows"
          package-type: "msi"

  generate-changelog:
    name: 'Generate Changelog'
    runs-on: ubuntu-latest
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git cliff --latest --strip header)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Update CHANGELOG.md
          git cliff --output CHANGELOG.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  # ================================================================
  # STAGE 6: PARALLEL PUBLICATION
  # ================================================================
  create-github-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [auto-version, build-linux, build-macos, build-windows, generate-changelog]
    if: needs.auto-version.outputs.version-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: ./.github/actions/github-release
        with:
          version: ${{ needs.auto-version.outputs.new-version }}
          changelog: ${{ needs.generate-changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-checksums:
    name: 'Generate & Publish Checksums'
    runs-on: ubuntu-latest
    needs: [auto-version, build-linux, build-macos, build-windows]
    if: needs.auto-version.outputs.version-created == 'true'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate checksums
        run: |
          find . -name "*.pkg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" -o -name "disk-cleaner*" | \
          while read file; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done
          sort checksums.txt -o checksums.txt

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: checksums.txt

  notify-completion:
    name: 'Notify Completion'
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-checksums]
    if: always() && needs.auto-version.outputs.version-created == 'true'
    steps:
      - name: Notify success
        if: needs.create-github-release.result == 'success' && needs.publish-checksums.result == 'success'
        run: |
          echo "🎉 Release v${{ needs.auto-version.outputs.new-version }} published successfully!"
          echo "📦 All packages created and uploaded"
          echo "🔍 Checksums generated and verified"

      - name: Notify failure
        if: needs.create-github-release.result == 'failure' || needs.publish-checksums.result == 'failure'
        run: |
          echo "❌ Release process failed"
          echo "Check previous jobs for details"
          exit 1