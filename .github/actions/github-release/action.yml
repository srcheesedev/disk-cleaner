name: 'Create GitHub Release'
description: 'Creates GitHub release with artifacts and syncs changelog'

inputs:
  version:
    description: 'Version to release'
    required: true
  changelog:
    description: 'Changelog content for this release'
    required: false
    default: ''
  token:
    description: 'GitHub token'
    required: true
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'

outputs:
  release-url:
    description: 'URL of created release'
    value: ${{ steps.create-release.outputs.url }}
  release-id:
    description: 'ID of created release'
    value: ${{ steps.create-release.outputs.id }}

runs:
  using: 'composite'
  steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      shell: bash
      run: |
        mkdir -p release-files
        find artifacts -name "*.tar.gz" -exec cp {} release-files/ \;
        find artifacts -name "*.zip" -exec cp {} release-files/ \;
        find artifacts -name "*.deb" -exec cp {} release-files/ \;
        find artifacts -name "*.rpm" -exec cp {} release-files/ \;
        find artifacts -name "*.pkg" -exec cp {} release-files/ \;
        find artifacts -name "*.msi" -exec cp {} release-files/ \;
        find artifacts -name "checksums.txt" -exec cp {} release-files/ \;
        echo "üì¶ Release files prepared:"
        ls -la release-files/

    - name: Generate release notes
      shell: bash
      run: |
        VERSION="v${{ inputs.version }}"
        TODAY=$(date +%Y-%m-%d)
        
        cat > release_notes.md << EOF
        ## üßπ Disk Cleaner $VERSION
        
        **Lightning-fast disk space analyzer and cleanup tool built with Rust** ‚ö°
        
        Released on $TODAY
        
        EOF
        
        # Add changelog content if provided
        if [ -n "${{ inputs.changelog }}" ]; then
          echo "${{ inputs.changelog }}" >> release_notes.md
        else
          echo "### Changes" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            echo "Changes since $LAST_TAG:" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" $LAST_TAG..HEAD --no-merges >> release_notes.md
          else
            echo "- Initial release" >> release_notes.md
          fi
        fi
        
        cat >> release_notes.md << 'EOF'
        
        ### üì• Installation Options
        
        | Platform | Installer Type | Download |
        |----------|---------------|----------|
        | üçé macOS | PKG Installer | `disk-cleaner-macos-v${{ inputs.version }}.pkg` |
        | ü™ü Windows | MSI Installer | `disk-cleaner-windows-v${{ inputs.version }}.msi` |
        | üêß Linux | DEB Package | `disk-cleaner_${{ inputs.version }}_amd64.deb` |
        | üêß Linux | RPM Package | `disk-cleaner-${{ inputs.version }}-1.x86_64.rpm` |
        | üì¶ Manual | Raw Binaries | Platform-specific archives below |
        
        ### üöÄ Quick Install
        ```bash
        # macOS
        curl -L -O https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/disk-cleaner-macos-v${{ inputs.version }}.pkg
        sudo installer -pkg disk-cleaner-macos-v${{ inputs.version }}.pkg -target /
        
        # Ubuntu/Debian
        curl -L -O https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/disk-cleaner_${{ inputs.version }}_amd64.deb
        sudo dpkg -i disk-cleaner_${{ inputs.version }}_amd64.deb
        
        # RHEL/Fedora/CentOS
        curl -L -O https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/disk-cleaner-${{ inputs.version }}-1.x86_64.rpm
        sudo rpm -i disk-cleaner-${{ inputs.version }}-1.x86_64.rpm
        
        # Windows (PowerShell as Administrator)
        Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version }}/disk-cleaner-windows-v${{ inputs.version }}.msi" -OutFile "disk-cleaner.msi"
        Start-Process msiexec.exe -ArgumentList "/i disk-cleaner.msi /quiet" -Wait
        ```
        
        ### üîç Checksums
        See `checksums.txt` for file verification.
        EOF

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ inputs.version }}"
        name: "Release v${{ inputs.version }}"
        body_path: release_notes.md
        files: release-files/*
        draft: false
        prerelease: ${{ inputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Update CHANGELOG.md
      shell: bash
      run: |
        VERSION="v${{ inputs.version }}"
        TODAY=$(date +%Y-%m-%d)
        
        # Create new changelog content
        echo "# Changelog" > CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        echo "All notable changes to this project will be documented in this file." >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        echo "## [$VERSION] - $TODAY" >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        
        # Add changes from git log
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          git log --pretty=format:"- %s" $LAST_TAG..HEAD --no-merges >> CHANGELOG_NEW.md
        else
          echo "### Added" >> CHANGELOG_NEW.md
          echo "- Initial release" >> CHANGELOG_NEW.md
        fi
        
        echo "" >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        
        # Append existing changelog if exists
        if [ -f CHANGELOG.md ]; then
          # Skip the header lines from existing file
          tail -n +4 CHANGELOG.md >> CHANGELOG_NEW.md
        fi
        
        mv CHANGELOG_NEW.md CHANGELOG.md
        echo "‚úÖ Updated CHANGELOG.md"

    - name: Setup Git and commit changelog
      uses: ./.github/actions/setup-git

    - name: Commit updated changelog
      shell: bash
      run: |
        echo "üìù Committing updated changelog..."
        git add CHANGELOG.md
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
        else
          git commit -m "docs: update changelog for v${{ inputs.version }} [skip ci]"
          git push origin HEAD
          echo "‚úÖ Pushed updated changelog"
        fi