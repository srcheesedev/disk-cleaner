name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # ================================================================
  # STAGE 1: ENVIRONMENT SETUP
  # ================================================================
  setup:
    name: 'Setup Environment'
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if should release
        id: check-release
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == "develop" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust environment
        uses: ./.github/actions/setup-rust
        with:
          components: 'rustfmt,clippy'
          cache-key-suffix: 'setup'

      - name: Pre-fetch dependencies
        run: cargo fetch

  # ================================================================
  # STAGE 2: PARALLEL TESTING
  # ================================================================
  test-unit:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key-suffix: 'unit-tests'

      - name: Run unit tests
        run: cargo test --lib --verbose

  test-integration:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key-suffix: 'integration-tests'

      - name: Run integration tests
        run: cargo test --test integration_tests --verbose

  test-lint:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: 'rustfmt,clippy'
          cache-key-suffix: 'lint'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Generate documentation
        run: cargo doc --no-deps --document-private-items

  test-security:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          install-cargo-audit: 'true'
          cache-key-suffix: 'security'

      - name: Run security audit
        run: cargo audit

  # ================================================================
  # STAGE 3: BUILD VERIFICATION
  # ================================================================
  build:
    name: 'Build Verification'
    runs-on: ubuntu-latest
    needs: [setup, test-unit, test-integration, test-lint, test-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key-suffix: 'build'

      - name: Build release
        run: cargo build --release

      - name: Find and upload build artifact
        shell: bash
        run: |
          # Find the binary (prefer clean name first)
          for binary_name in "disk-cleaner" "disk-cleaner-rs"; do
            if [ -f "target/release/${binary_name}" ]; then
              BINARY_PATH="target/release/${binary_name}"
              echo "Found binary: $BINARY_PATH"
              break
            fi
          done
          
          if [ -z "$BINARY_PATH" ]; then
            echo "❌ No binary found in target/release/"
            ls -la target/release/
            exit 1
          fi
          
          # Create artifact directory
          mkdir -p build-artifact
          cp "$BINARY_PATH" build-artifact/
          echo "BINARY_PATH=$BINARY_PATH" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-verification
          path: build-artifact/

  # ================================================================
  # STAGE 4: VERSIONING (PR develop -> main only)
  # ================================================================
  auto-version:
    name: 'Auto Version & Tag'
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-release == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      version-created: ${{ steps.version.outputs.version-created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto version and tag
        id: version
        uses: ./.github/actions/auto-version
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # ================================================================
  # STAGE 5: BASIC ARTIFACT CREATION (Simplified)
  # ================================================================
  build-artifacts:
    name: 'Build Artifacts'
    runs-on: ${{ matrix.os }}
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: "linux"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: "windows"
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: "macos"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Build artifacts
        uses: ./.github/actions/build-artifacts
        with:
          version: ${{ needs.auto-version.outputs.new-version }}
          target: ${{ matrix.target }}
          platform: ${{ matrix.platform }}

  generate-changelog:
    name: 'Generate Changelog'
    runs-on: ubuntu-latest
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git cliff --latest --strip header)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Update CHANGELOG.md
          git cliff --output CHANGELOG.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  # ================================================================
  # STAGE 6: RELEASE CREATION
  # ================================================================
  create-github-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [auto-version, build-artifacts, generate-changelog]
    if: needs.auto-version.outputs.version-created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "v${{ needs.auto-version.outputs.new-version }}"

      - name: Create GitHub Release
        uses: ./.github/actions/github-release
        with:
          version: ${{ needs.auto-version.outputs.new-version }}
          changelog: ${{ needs.generate-changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}