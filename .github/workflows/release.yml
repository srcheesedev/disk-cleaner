name: 'Release & Distribution'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
      
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff
      
      - name: Generate Changelog
        id: generate_changelog
        run: |
          # Generate changelog for this release
          CHANGELOG=$(git cliff --latest --strip header)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Update CHANGELOG.md file
          git cliff --output CHANGELOG.md
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: 'Disk Cleaner v${{ steps.get_version.outputs.version }}'
          body: |
            ## 🧹 Disk Cleaner v${{ steps.get_version.outputs.version }}
            
            **Lightning-fast disk space analyzer and cleanup tool built with Rust** ⚡
            
            ${{ steps.generate_changelog.outputs.changelog }}
            
            ### 📥 Installation Options
            
            ### � Download Options
            
            | Platform | Installer Type | Download |
            |----------|---------------|----------|
            | 🍎 macOS | PKG Installer | `disk-cleaner-macos-v${{ steps.get_version.outputs.version }}.pkg` |
            | 🪟 Windows | MSI Installer | `disk-cleaner-windows-v${{ steps.get_version.outputs.version }}.msi` |
            | 🐧 Linux | DEB Package | `disk-cleaner_${{ steps.get_version.outputs.version }}_amd64.deb` |
            | 🐧 Linux | RPM Package | `disk-cleaner-${{ steps.get_version.outputs.version }}-1.x86_64.rpm` |
            | 📦 Manual | Raw Binaries | Platform-specific binaries below |
            
            ### 🚀 Quick Install
            ```bash
            # macOS
            curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/disk-cleaner-macos-v${{ steps.get_version.outputs.version }}.pkg
            sudo installer -pkg disk-cleaner-macos-v${{ steps.get_version.outputs.version }}.pkg -target /
            
            # Ubuntu/Debian
            curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/disk-cleaner_${{ steps.get_version.outputs.version }}_amd64.deb
            sudo dpkg -i disk-cleaner_${{ steps.get_version.outputs.version }}_amd64.deb
            
            # RHEL/Fedora/CentOS
            curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/disk-cleaner-${{ steps.get_version.outputs.version }}-1.x86_64.rpm
            sudo rpm -i disk-cleaner-${{ steps.get_version.outputs.version }}-1.x86_64.rpm
            
            # Windows (PowerShell as Administrator)
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/disk-cleaner-windows-v${{ steps.get_version.outputs.version }}.msi" -OutFile "disk-cleaner.msi"
            Start-Process msiexec.exe -ArgumentList "/i disk-cleaner.msi /quiet" -Wait
            ```
            
            ### ✨ What's New
            - Performance improvements
            - Bug fixes and stability enhancements
            - Cross-platform compatibility updates
            
            ### 🔍 Checksums
            See `checksums.txt` for file verification.
          draft: false
          prerelease: false

  # Build for multiple platforms
  build-release:
    name: Build Release Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: disk-cleaner-macos-x64
            installer: true
          - target: aarch64-apple-darwin
            os: macos-latest
            name: disk-cleaner-macos-arm64
            installer: true
          
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: disk-cleaner-windows-x64.exe
            installer: true
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: disk-cleaner-windows-arm64.exe
            installer: false
          
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: disk-cleaner-linux-x64
            installer: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: disk-cleaner-linux-x64-musl
            installer: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: disk-cleaner-linux-arm64
            installer: false

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
      
      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/disk-cleaner-rs ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
      
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\\${{ matrix.target }}\\release\\disk-cleaner-rs.exe ${{ matrix.name }}
      
      - name: Create checksums
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
          else
            sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256
          fi
      
      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream
      
      - name: Upload checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.sha256
          asset_name: ${{ matrix.name }}.sha256
          asset_content_type: text/plain

  # Create macOS installer (PKG)
  create-macos-installer:
    name: Create macOS Installer
    needs: [create-release, build-release]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download macOS binaries
        run: |
          gh release download v${{ needs.create-release.outputs.version }} \
            --pattern "disk-cleaner-macos-*" \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create universal binary
        run: |
          lipo -create -output disk-cleaner \
            disk-cleaner-macos-x64 \
            disk-cleaner-macos-arm64
          chmod +x disk-cleaner
      
      - name: Create PKG installer
        run: |
          # Create package structure
          mkdir -p package_root/usr/local/bin
          mkdir -p package_root/usr/local/share/man/man1
          
          # Copy binary
          cp disk-cleaner package_root/usr/local/bin/
          
          # Create man page
          cat > package_root/usr/local/share/man/man1/disk-cleaner.1 << 'EOF'
          .TH DISK-CLEANER 1 "$(date +'%B %Y')" "v${{ needs.create-release.outputs.version }}" "User Commands"
          .SH NAME
          disk-cleaner \- lightning-fast disk space analyzer and cleanup tool
          .SH SYNOPSIS
          .B disk-cleaner
          [\fIOPTIONS\fR] [\fIDIRECTORY\fR]
          .SH DESCRIPTION
          A high-performance disk space analyzer built with Rust that helps you find space hogs and clean up clutter with confidence.
          .SH OPTIONS
          .TP
          \fB\-h\fR, \fB\-\-help\fR
          Print help information
          .TP
          \fB\-V\fR, \fB\-\-version\fR
          Print version information
          .TP
          \fB\-d\fR, \fB\-\-depth\fR \fIDEPTH\fR
          Maximum depth to scan
          .TP
          \fB\-\-min\-size\fR \fISIZE\fR
          Minimum file size to display
          .TP
          \fB\-\-dirs\-only\fR
          Show only directories
          .TP
          \fB\-\-files\-only\fR
          Show only files
          .SH EXAMPLES
          .TP
          Analyze current directory:
          \fBdisk-cleaner\fR
          .TP
          Analyze with depth limit:
          \fBdisk-cleaner -d 3 /Users/username\fR
          .TP
          Show only large files:
          \fBdisk-cleaner --min-size 1GB --files-only\fR
          .SH AUTHOR
          Written by srcheesedev.
          .SH REPORTING BUGS
          Report bugs at: https://github.com/srcheesedev/disk-cleaner/issues
          EOF
          
          # Create component property list
          cat > component.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>BundleHasStrictIdentifier</key>
              <true/>
              <key>BundleIsRelocatable</key>
              <false/>
              <key>BundleIsVersionChecked</key>
              <true/>
              <key>BundleOverwriteAction</key>
              <string>upgrade</string>
              <key>RootRelativeBundlePath</key>
              <string>usr/local/bin/disk-cleaner</string>
          </dict>
          </plist>
          EOF
          
          # Build component package
          pkgbuild --root package_root \
                   --identifier com.srcheesedev.disk-cleaner \
                   --version ${{ needs.create-release.outputs.version }} \
                   --install-location / \
                   --component-plist component.plist \
                   disk-cleaner-component.pkg
          
          # Create distribution XML
          cat > distribution.xml << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <installer-gui-script minSpecVersion="1">
              <title>Disk Cleaner v${{ needs.create-release.outputs.version }}</title>
              <organization>com.srcheesedev</organization>
              <domains enable_localSystem="true"/>
              <options customize="never" require-scripts="false" hostArchitectures="x86_64,arm64"/>
              
              <pkg-ref id="com.srcheesedev.disk-cleaner"/>
              <choices-outline>
                  <line choice="default">
                      <line choice="com.srcheesedev.disk-cleaner"/>
                  </line>
              </choices-outline>
              
              <choice id="default"/>
              <choice id="com.srcheesedev.disk-cleaner" visible="false">
                  <pkg-ref id="com.srcheesedev.disk-cleaner"/>
              </choice>
              
              <pkg-ref id="com.srcheesedev.disk-cleaner" version="${{ needs.create-release.outputs.version }}" onConclusion="none">disk-cleaner-component.pkg</pkg-ref>
              
              <welcome file="welcome.html" mime-type="text/html"/>
              <conclusion file="conclusion.html" mime-type="text/html"/>
          </installer-gui-script>
          EOF
          
          # Create welcome message
          cat > welcome.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; }
                  h1 { color: #007AFF; }
              </style>
          </head>
          <body>
              <h1>🧹 Disk Cleaner v${{ needs.create-release.outputs.version }}</h1>
              <p>Welcome to the Disk Cleaner installer!</p>
              <p>This will install the disk-cleaner command-line tool to <code>/usr/local/bin</code>, making it available in your terminal.</p>
              <p><strong>Features:</strong></p>
              <ul>
                  <li>⚡ Lightning-fast disk space analysis</li>
                  <li>🔍 Interactive terminal interface</li>
                  <li>🛡️ Safe deletion with confirmations</li>
                  <li>🎯 Flexible filtering options</li>
              </ul>
          </body>
          </html>
          EOF
          
          # Create conclusion message
          cat > conclusion.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; }
                  h1 { color: #34C759; }
                  code { background: #f5f5f5; padding: 2px 4px; border-radius: 3px; }
              </style>
          </head>
          <body>
              <h1>✅ Installation Complete!</h1>
              <p>Disk Cleaner has been successfully installed to <code>/usr/local/bin/disk-cleaner</code></p>
              
              <h3>🚀 Getting Started</h3>
              <p>Open Terminal and try these commands:</p>
              <ul>
                  <li><code>disk-cleaner --help</code> - Show help</li>
                  <li><code>disk-cleaner</code> - Analyze current directory</li>
                  <li><code>disk-cleaner ~/Downloads</code> - Analyze Downloads folder</li>
              </ul>
              
              <h3>📚 Learn More</h3>
              <ul>
                  <li><a href="https://github.com/srcheesedev/disk-cleaner">Documentation</a></li>
                  <li><a href="https://github.com/srcheesedev/disk-cleaner/issues">Report Issues</a></li>
              </ul>
          </body>
          </html>
          EOF
          
          # Build final PKG
          productbuild --distribution distribution.xml \
                       --package-path . \
                       --resources . \
                       "disk-cleaner-macos-v${{ needs.create-release.outputs.version }}.pkg"
      
      - name: Upload PKG to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./disk-cleaner-macos-v${{ needs.create-release.outputs.version }}.pkg
          asset_name: disk-cleaner-macos-v${{ needs.create-release.outputs.version }}.pkg
          asset_content_type: application/x-newton-compatible-pkg

  # Create Windows installer (MSI)
  create-windows-installer:
    name: Create Windows Installer
    needs: [create-release, build-release]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Windows binary
        run: |
          gh release download v${{ needs.create-release.outputs.version }} `
            --pattern "disk-cleaner-windows-x64.exe" `
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install WiX Toolset
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" -OutFile "wix.zip"
          Expand-Archive -Path "wix.zip" -DestinationPath "wix"
          echo "$PWD\wix" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Create WiX installer script
        run: |
          @'
          <?xml version="1.0" encoding="UTF-8"?>
          <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
            <Product Id="*" Name="Disk Cleaner" Language="1033" Version="${{ needs.create-release.outputs.version }}" 
                     Manufacturer="srcheesedev" UpgradeCode="12345678-1234-1234-1234-123456789012">
              <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />
              
              <MajorUpgrade DowngradeErrorMessage="A newer version is already installed." />
              <MediaTemplate EmbedCab="yes" />
              
              <Feature Id="ProductFeature" Title="Disk Cleaner" Level="1">
                <ComponentGroupRef Id="ProductComponents" />
              </Feature>
            </Product>
            
            <Fragment>
              <Directory Id="TARGETDIR" Name="SourceDir">
                <Directory Id="ProgramFilesFolder">
                  <Directory Id="INSTALLFOLDER" Name="Disk Cleaner" />
                </Directory>
                <Directory Id="ProgramMenuFolder">
                  <Directory Id="ApplicationProgramsFolder" Name="Disk Cleaner"/>
                </Directory>
              </Directory>
            </Fragment>
            
            <Fragment>
              <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
                <Component Id="disk_cleaner.exe" Guid="12345678-1234-1234-1234-123456789013">
                  <File Id="disk_cleaner.exe" Source="disk-cleaner-windows-x64.exe" KeyPath="yes">
                    <Shortcut Id="ApplicationStartMenuShortcut" Directory="ApplicationProgramsFolder" 
                              Name="Disk Cleaner" WorkingDirectory="INSTALLFOLDER" Advertise="yes" />
                  </File>
                </Component>
              </ComponentGroup>
            </Fragment>
          </Wix>
          '@ | Out-File -FilePath "installer.wxs" -Encoding utf8
      
      - name: Build MSI installer
        run: |
          candle.exe installer.wxs
          light.exe -ext WixUIExtension installer.wixobj -o "disk-cleaner-windows-v${{ needs.create-release.outputs.version }}.msi"
      
      - name: Upload MSI to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./disk-cleaner-windows-v${{ needs.create-release.outputs.version }}.msi
          asset_name: disk-cleaner-windows-v${{ needs.create-release.outputs.version }}.msi
          asset_content_type: application/x-msi

  # Create Linux packages
  create-linux-packages:
    name: Create Linux Packages
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Linux binary
        run: |
          gh release download v${{ needs.create-release.outputs.version }} \
            --pattern "disk-cleaner-linux-x64" \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg-dev
      
      - name: Create DEB package
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/bin
          mkdir -p package/usr/share/doc/disk-cleaner
          
          # Copy binary
          cp disk-cleaner-linux-x64 package/usr/bin/disk-cleaner
          chmod +x package/usr/bin/disk-cleaner
          
          # Create control file
          cat > package/DEBIAN/control << EOF
          Package: disk-cleaner
          Version: ${{ needs.create-release.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: srcheesedev <noreply@github.com>
          Description: Lightning-fast disk space analyzer and cleanup tool
           A high-performance disk space analyzer built with Rust that helps
           you find space hogs and clean up clutter with confidence.
          EOF
          
          # Create copyright file
          cp LICENSE package/usr/share/doc/disk-cleaner/copyright
          
          # Build DEB
          dpkg-deb --build package disk-cleaner_${{ needs.create-release.outputs.version }}_amd64.deb
      
      - name: Create RPM package
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Create spec file
          cat > ~/rpmbuild/SPECS/disk-cleaner.spec << EOF
          Name:           disk-cleaner
          Version:        ${{ needs.create-release.outputs.version }}
          Release:        1%{?dist}
          Summary:        Lightning-fast disk space analyzer and cleanup tool
          License:        MIT
          URL:            https://github.com/srcheesedev/disk-cleaner
          Source0:        disk-cleaner-linux-x64
          
          %description
          A high-performance disk space analyzer built with Rust that helps
          you find space hogs and clean up clutter with confidence.
          
          %install
          mkdir -p %{buildroot}/usr/bin
          cp %{SOURCE0} %{buildroot}/usr/bin/disk-cleaner
          chmod +x %{buildroot}/usr/bin/disk-cleaner
          
          %files
          /usr/bin/disk-cleaner
          
          %changelog
          * $(date +'%a %b %d %Y') srcheesedev <noreply@github.com> - ${{ needs.create-release.outputs.version }}-1
          - Release v${{ needs.create-release.outputs.version }}
          EOF
          
          # Copy source
          cp disk-cleaner-linux-x64 ~/rpmbuild/SOURCES/
          
          # Build RPM
          rpmbuild -bb ~/rpmbuild/SPECS/disk-cleaner.spec
          cp ~/rpmbuild/RPMS/x86_64/disk-cleaner-*.rpm .
      
      - name: Upload DEB to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./disk-cleaner_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_name: disk-cleaner_${{ needs.create-release.outputs.version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
      
      - name: Upload RPM to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./disk-cleaner-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_name: disk-cleaner-${{ needs.create-release.outputs.version }}-1.x86_64.rpm
          asset_content_type: application/x-rpm