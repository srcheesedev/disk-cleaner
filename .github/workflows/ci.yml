name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # ================================================================
  # TESTS - Quality & Security Analysis
  # ================================================================
  tests:
    name: Quality & Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust environment
      uses: ./.github/actions/setup-rust
      with:
        components: 'rustfmt,clippy'
        install-cargo-audit: 'true'
        cache-key-suffix: 'tests'

    - name: Run quality checks
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets --all-features -- -D warnings
        cargo test --verbose
        cargo doc --no-deps --document-private-items
        cargo audit

  # ================================================================
  # BUILD - Compilation Verification
  # ================================================================
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust environment
      uses: ./.github/actions/setup-rust
      with:
        cache-key-suffix: 'build'
    
    - name: Verify compilation
      run: |
        cargo check --release
        cargo build --release

  # ================================================================
  # AUTO-VERSION - Semantic Versioning (PR develop -> main only)
  # ================================================================
  auto-version:
    name: Auto Version & Tag
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: github.event_name == 'pull_request' && github.base_ref == 'main' && github.head_ref == 'develop'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      version-created: ${{ steps.version.outputs.version-created }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto version and tag
      id: version
      uses: ./.github/actions/auto-version
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # ================================================================
  # RELEASE ARTIFACTS - Multi-platform builds
  # ================================================================
  release-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: [auto-version]
    if: needs.auto-version.outputs.version-created == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: "linux"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: "windows"
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: "macos-intel"
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: "macos-arm64"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: "v${{ needs.auto-version.outputs.new-version }}"

    - name: Build and package artifacts
      uses: ./.github/actions/build-artifacts
      with:
        version: ${{ needs.auto-version.outputs.new-version }}
        target: ${{ matrix.target }}
        platform: ${{ matrix.platform }}

  # ================================================================
  # GITHUB RELEASE - Create release with changelog
  # ================================================================
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [auto-version, release-artifacts]
    if: needs.auto-version.outputs.version-created == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: "v${{ needs.auto-version.outputs.new-version }}"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release and sync changelog
      uses: ./.github/actions/github-release
      with:
        version: ${{ needs.auto-version.outputs.new-version }}
        token: ${{ secrets.GITHUB_TOKEN }}